<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 반드시 세미콜론 생략 -->
<mapper
	namespace="com.tenco.bankapp.repository.interfaces.HistoryRepository">

	<insert id="insert"
		parameterType="com.tenco.bankapp.repository.entity.History">
		insert into
		history_tb(amount, w_balance, d_balance,
		w_account_id, d_account_id)
		values(#{amount},
		#{wBalance}, #{dBalance},
		#{wAccountId}, #{dAccountId})
	</insert>


	<delete id="deleteById">
		delete from histoy_tb where id = #{id}
	</delete>

	<update id="updateById">
		update history_tb
		set amount = #{amount},
		w_balance =
		#{wBalance},
		d_balance = #{dBalance}
		where id = #{id}
	</update>

	<select id="findAll"
		resultType="com.tenco.bankapp.repository.entity.History">
		select * from history_tb where id = #{id}
	</select>

	<select id="findByAccountNumber"
		resultType="com.tenco.bankapp.repository.entity.History">
		select * from histoy_tb h
		join account_tb a
		on h.w_account_id
		= a.id
		where a.number = #{wAccountNumber}
	</select>

	<!-- 동적 쿼리 생성 예정 findByIdAndDynamicType -->
<select id="findByIdAndDynamicType" resultType="com.tenco.bankapp.repository.entity.History">
	<if test="type == 'deposit'">
		select h.id, h.amount, h.d_balance as balance,
		       h.created_at,
		       da.number as receiver, 
		       ifnull(h.w_account_id, 'ATM') as sender, 
		       wa.number 
		from history_tb as h  
		left join account_tb as da
		on h.d_account_id = da.id 
		left join account_tb as wa 
		on h.w_account_id = wa.id 
		where h.d_account_id = #{accountId} 
	</if>
	<if test="type == 'withdraw'">
		select h.id, h.amount, h.w_balance as balance,
		       h.created_at,
		       ifnull(da.number, 'ATM') as receiver,
		       wa.number as sender
		from history_tb as h 
		left join account_tb as wa
		on  h.w_account_id = wa.id
		left join account_tb as da 
		on h.d_account_id = da.id 
		where h.w_account_id = #{accountId} 
	</if>
	<if test="type == 'all'">
		select h.id, h.amount, 
		case when h.w_account_id = #{accountId} then (h.w_balance)
		     when h.d_account_id = #{accountId} then (h.d_balance)
		     end as balance,
		     ifnull(wa.number, 'ATM') as sender, 
		     ifnull(da.number, 'ATM') as receiver, 
		     h.created_at 
		from history_tb as h 
		left join account_tb as da 
		on h.d_account_id = da.id 
		left join account_tb as wa 
		on h.w_account_id = wa.id
		where h.d_account_id = #{accountId} or h.w_account_id = #{accountId}
	</if>
</select>









</mapper>